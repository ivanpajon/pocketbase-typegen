// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createRecordType creates type definition for a record 1`] = `
"export type BooksRecord = {
	title?: string
}"
`;

exports[`createRecordType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[] | File[]
}"
`;

exports[`createResponseType creates type definition for a response 1`] = `"export type BooksResponse<Texpand = unknown> = Required<BooksRecord> & BaseSystemFields<Texpand>"`;

exports[`createResponseType handles file fields with multiple files 1`] = `
"export type BooksRecord = {
	avatars?: string[] | File[]
}"
`;

exports[`generate generates correct output given db input 1`] = `
"/**
* This file was @generated using pocketbase-typegen
*/

import type PocketBase from 'pocketbase'
import type { RecordService } from 'pocketbase'

export enum Collections {
	Books = "books",
}

// Alias types for improved usability
export type IsoDateString = string
export type IsoAutoDateString = string & { readonly auto: unique symbol }
export type RecordIdString = string
export type HTMLString = string
export type Nullable<T> = T | null | ''

// System fields
export type BaseSystemFields<T = never> = {
	id: RecordIdString
	collectionId: string
	collectionName: Collections
	expand?: T
}

export type BaseSystemCreateFields = {
	id?: RecordIdString
}

export type BaseSystemUpdateFields = unknown

export type AuthSystemFields<T = never> = {
	email: string
	emailVisibility: boolean
	username: string
	verified: boolean
} & BaseSystemFields<T>

export type AuthSystemCreateFields = {
	id?: RecordIdString
	email: string
	emailVisibility?: boolean
	password: string
	passwordConfirm: string
	verified?: boolean
}

export type AuthSystemUpdateFields = {
	email?: string
	emailVisibility?: boolean
	oldPassword?: string
	password?: string
	passwordConfirm?: string
	verified?: boolean
}

// Record types for each collection

export type BooksRecord = {
	title?: string
}

// Response types include system fields and match responses from the PocketBase API
export type BooksResponse<Texpand = unknown> = Required<BooksRecord> & BaseSystemFields<Texpand>

// Types containing all Records and Responses, useful for creating typing helper functions

export type CollectionRecords = {
	books: BooksRecord
}

export type CollectionResponses = {
	books: BooksResponse
}

// Type for usage with type asserted PocketBase instance
// https://github.com/pocketbase/js-sdk#specify-typescript-definitions

export type TypedPocketBase = {
	collection<T extends keyof CollectionResponses>(
		idOrName: T
	): RecordService<CollectionResponses[T]>;
} & PocketBase;

/** Utility types for PocketBase record operations */

// Helper to determine if a collection is Auth
type IsAuthCollection<T extends keyof CollectionResponses> =
	CollectionResponses[T] extends AuthSystemFields ? true : false;

// Utility type that omits fields of type IsoAutoDateString
type OmitAutodate<T> = {
	[K in keyof T as T[K] extends IsoAutoDateString ? never : K]: T[K]
};

// Create type for Auth collections
export type CreateAuth<T> = OmitAutodate<Omit<T, 'id'>> & AuthSystemCreateFields;

// Create type for Base collections
export type CreateBase<T> = OmitAutodate<Omit<T, 'id'>> & BaseSystemCreateFields;

// Update type for Auth collections
export type UpdateAuth<T> = Partial<Omit<T, keyof AuthSystemFields>> & AuthSystemUpdateFields;

// Update type for Base collections
export type UpdateBase<T> = Partial<Omit<T, keyof BaseSystemFields>> & BaseSystemUpdateFields;

// Get the correct create type for any collection
export type Create<T extends keyof CollectionResponses> =
	IsAuthCollection<T> extends true
		? CreateAuth<CollectionRecords[T]>
		: CreateBase<CollectionRecords[T]>;

// Get the correct update type for any collection
export type Update<T extends keyof CollectionResponses> =
	IsAuthCollection<T> extends true
		? UpdateAuth<CollectionRecords[T]>
		: UpdateBase<CollectionRecords[T]>;
"
`;
